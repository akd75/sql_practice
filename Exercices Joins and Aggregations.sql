SELECT * FROM departments;
SELECT * FROM categories;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM order_items;
SELECT * FROM customers;



-- ### Exercise 1 - Customer order count

-- Get order count per customer for the month of 2014 January.

-- * Tables - `orders` and `customers`
-- * Data should be sorted in descending order by count and ascending order by customer id.
-- * Output should contain `customer_id`, `customer_fname`, `customer_lname` and `customer_order_count`.

SELECT customer_id, customer_fname,customer_lname,COUNT(*) AS customer_order_count
FROM customers
	JOIN orders  ON order_customer_id=customer_id
WHERE to_char(order_date, 'yyyy-MM') = '2014-01'
GROUP BY customer_id, customer_fname,customer_lname,order_customer_id
ORDER BY customer_order_count DESC,order_customer_id ;





-- ### Exercise 2 - Dormant Customers

-- Get the customer details who have not placed any order for the month of 2014 January.
-- * Tables - `orders` and `customers`
-- * Output Columns - **All columns from customers as is**
-- * Data should be sorted in ascending order by `customer_id`
-- * Output should contain all the fields from `customers`
-- * Make sure to run below provided validation queries and validate the output.

SELECT customers.*
FROM customers
	JOIN orders  ON order_customer_id=customer_id
WHERE NOT EXISTS (
	SELECT order_customer_id
	FROM orders 
	WHERE order_customer_id=customer_id AND	to_char(order_date, 'yyyy-MM') = '2014-01')
ORDER BY customer_id;



-- ### Exercise 3 - Revenue Per Customer

-- Get the revenue generated by each customer for the month of 2014 January
-- * Tables - `orders`, `order_items` and `customers`
-- * Data should be sorted in descending order by revenue and then ascending order by `customer_id`
-- * Output should contain `customer_id`, `customer_fname`, `customer_lname`, `customer_revenue`.
-- * If there are no orders placed by customer, then the corresponding revenue for a given customer should be 0.
-- * Consider only `COMPLETE` and `CLOSED` orders


SELECT customer_id, customer_fname, customer_lname, COALESCE(SUM(order_item_subtotal),0) AS customer_revenue
FROM customers
	LEFT JOIN orders
		ON order_customer_id=customer_id
	LEFT JOIN order_items 
		ON order_item_order_id=order_id
WHERE order_status IN ('CLOSED','COMPLETE') AND to_char(order_date, 'yyyy-MM') = '2014-01'
GROUP BY customer_id
ORDER BY customer_revenue DESC, customer_id;





-- ### Exercise 4 - Revenue Per Category

-- Get the revenue generated for each category for the month of 2014 January
-- * Tables - `orders`, `order_items`, `products` and `categories`
-- * Data should be sorted in ascending order by `category_id`.
-- * Output should contain all the fields from `categories` along with the revenue as `category_revenue`.
-- * Consider only `COMPLETE` and `CLOSED` orders


SELECT category_id,category_department_id,category_name, (SUM(order_item_subtotal)) AS categorie_revenue
FROM orders
	 JOIN order_items 
		ON order_item_order_id=order_id		
	 JOIN products
		ON order_item_product_id=product_id
	 JOIN categories
		ON product_category_id=category_id
WHERE order_status IN ('CLOSED','COMPLETE') AND to_char(order_date, 'yyyy-MM') = '2014-01'
GROUP BY category_id
ORDER BY 1;



-- ### Exercise 5 - Product Count Per Department

-- Get the count of products for each department.
-- * Tables - `departments`, `categories`, `products`
-- * Data should be sorted in ascending order by `department_id`
-- * Output should contain all the fields from `departments` and the product count as `product_count`


SELECT department_id,department_name, COUNT(product_id) AS product_count
FROM products
	LEFT JOIN categories
		ON product_category_id=category_id
	LEFT JOIN departments
		ON category_department_id=department_id
GROUP BY department_name, department_id
ORDER BY department_id;
	
	